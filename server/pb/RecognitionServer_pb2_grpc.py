# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from server.pb import RecognitionServer_pb2 as RecognitionServer__pb2


class RecognitionServerStub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
        """Constructor.

        Args:
          channel: A grpc.Channel.
        """
        self.GestureRecognition = channel.stream_stream(
            '/recognition.RecognitionServer/GestureRecognition',
            request_serializer=RecognitionServer__pb2.GestureRecognitionRequest.SerializeToString,
            response_deserializer=RecognitionServer__pb2.GestureRecognitionReply.FromString,
        )


class RecognitionServerServicer(object):
    # missing associated documentation comment in .proto file
    pass

    def GestureRecognition(self, request_iterator, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RecognitionServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GestureRecognition': grpc.stream_stream_rpc_method_handler(
            servicer.GestureRecognition,
            request_deserializer=RecognitionServer__pb2.GestureRecognitionRequest.FromString,
            response_serializer=RecognitionServer__pb2.GestureRecognitionReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'recognition.RecognitionServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
